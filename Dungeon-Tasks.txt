Старые скрипты удалить в отдельной ветке, чтобы иметь возможность переключаться на старый вариант.
====================
ОБОЗНАЧЕНИЯ:
* Соблюдать
? Обдумать
! Изменить/исправить
+ Добавить/сделать
- Убрать
====================
БАЗОВЫЕ ТРЕБОВАНИЯ (в конце основного рефакторинга провести обзорный рефакторинг):
* Архитектуру проекта должна быть в соответствии с принципами DDD
* Нормальные имена для пространств имен/классов/членов классов. Папки в проекте в соответствии с пространствами имен.
* Соблюдать порядок расположения членов в классах.
* Наследоваться от MonoBehaviour или ScriptableObject только там, где это действительно нужно.
* Классы для внутреннего использования в компоненте объявлять вложенными (можно как partial).
* Свойства только для нужных полей. Сериализовать поля только когда необходимо (доступ из редакторе, сохранение в JSON).
====================
ИЕРАРХИЯ ПРОСТРАНСТВ ИМЕН (И ПАПОК В ПРОЕКТЕ):
* Application - Обертка игры (меню и прочее). Все, что не имеет отношения непосредственно к геймплею.
* Attributes
* Editor - Используется только в редакторе, в билд не идет.
	* PropertyDrawers
* Game - Используется непосредственно в игре.
	* Presentation - Уровень представления.
		* PlayerCharacter
		* UI - Интерфейс пользователя.
			* InventorySystem
	* Control - Управляющие компоненты.
		* PlayerCharacter
	* Model - Предметная модель игры.
		* InteractionSystem
		* InventorySystem
		* Items
		* PlayerCharacter
		* Tiles
	* Infrastructure - Инфраструктура. Все, что обеспечивает работоспособность других уровней.
		* InventorySystem
		* UI
--------------------
! Иерархия папок = иерархия пространства имен.
- Старые пространства имен.
--------------------
СОМНЕНИЯ В ПОСТРОЕНИИ ИЕРАРХИИ:
? Model.PlayerCharacter contains Mover
? ItemDetector зависит от уровня модели (Item), который находится выше в иерархии. ?! Как вариант, можно сделать просто общий детектор коллайдеров и ?+ Службу<T> получающую <Type> с коллайдеров.
? Message находится в UI, а может нужно в Model или Infrastructure?
--------------------
СОМНЕНИЯ В НАИМЕНОВАНИИ:
? Mover not PlayerMover. Но PlayerAnimator not Animator т.к. есть Animator in UnityEngine. В итоге не полное единообразие.
! Environment => Tile (для всего)
====================
GRAPHICS:
! Объединить всю графику в один тайлсет.
+! Нарисовать и добавить спрайты сломанных предметов - для уведомлений о разрушении предмета подойдут идеально.
--------------------
EDITOR:
- Все ненужные теги после рефакторинга.
! Отсортировать слои после рефакторинга.
! Атрибут для размещения списков/массивов в строку. Например, указать количество элементов в строке и их ширину.
! FloatRange - свой редактор с ползунками
+ Удобное создание уровней (расстановка тайлов) в редакторе.
+ Код для Editior, чтобы выбранные спрайты для тайлов/предметов были видны как изображения, а не как поля.
--------------------
DI:
+ Систему зависимостей для префабов, объектов на сцене.
? Через Level?
--------------------
MAIN MENU:
+! Добавить главное меню, внеся исправления в старое.
--------------------
MONOBEHAVIOURs:
+ UpdateManager, если много Update
--------------------
MODEL:
! Флаг о разовом показе сообщения о скором разрушении предмета нужно вынести в слот рук, так как это к нему относится, а не к предмету.
! Отделить модель инвентаря от действий около
--------------------
SCENE:
! Player.position.Z сделал равным 1, чтобы предметы подсвечивались, когда игрок стоит за ними. Когда отсортирую слои, тогда, возможно, вернуть в 0.
--------------------
ANIMATIONS/STATES:
+ Анимацию прыжка конечная, переходящая в падение через время.
--------------------
LEVEL:
? Верно ли, что ссылка на Player хранится в Level?
--------------------
CONTROLLER:
+ Аттрибут для компактного отображения массива клавиш (когда создам его).
--------------------
PLAYER:
? Направления: RightDirection. Добавить лицом к экрану/от экрана?
- YCorrection. ! pivot.
--------------------
MOVEMENT SYSTEM:
! Когда зажата кнопка прыжка, то происходит удвоенное приземление игрока (видно в логах).
! Очень высокий прыжок, когда сбоку вплотную находится тайл (попробовать уменьшить GroundCheck).
--------------------
INTERACTION SYSTEM:
+ Можно сделать повреждения предметов/тайлов случайные в небольшом диапазоне, а не фиксированные.
! Предупреждение о скором разрушении предмета в руках множественное, а не разовое, как должно быть.
! После разрушения предмета в руках, его все равно можно использовать. Необходимо уничтожать его.
+ После разрушения тайла до его уничтожения с ним должно быть нельзя взаимодействовать, не должно быть его подсветки.
! При наненсении повреждения и вспышки тайла, его endingColor в ColorBacklighter становиться словно чуть темнее изначального цвета подсветки.
? Backligher в ElementMouseController проверяется на null, а не проверка на BlackStone. Как правильней?
+ Сообщение: Бесполезно пытаться разрушить черный камень!
+ Проверку на BlackStone и пресечение возможности взаимодействия с ним сразу.
--------------------
INVENTORY SYSTEM:
! Сообщение о невозможности подобрать, когда инвентарь заполнен и не показывать его, если что-то все же подобрали.
! Выложенные предметы становится невозможно подсветить и подобрать, когда за ними стоит игрок.
! Названия методов (полей) во всех классах привести в соответствие. Например, относительно подбора и выбрасывания предметов.
+ Показывать информацию о предметах в инвентаре.
--------------------
NOTIFICATIONS/MESSAGES:
+ Текстовые описания сделать более юморными.
+ Отдельный модуль в редакторе со всеми сообщениями (из ElementMouseController...)
--------------------
UI:
+ Сделать возможность задавать форматирование строк и округление в инспекторе (для здоровья/прочности).
+ Вынести в отдельную сцену, после рефакторинга, которую подгружать для каждого уровня.
+ Сделать растягивание текста в сообщениях Notifier на всю ширину при отключенной картинке.
====================
ECS:
+ После рефакторинга проекта сделать ветку, в которой переписать все под ECS. И развивать обе ветки параллельно.
