БАЗОВЫЕ ТРЕБОВАНИЯ (в конце основного рефакторинга провести обзорный рефакторинг):

- Нормальные имена для пространств имен/классов/членов классов. Папки в проекте в соответствии с пространствами имен.
- Соблюдать порядок расположения членов в классах.
- Наследоваться от MonoBehaviour или ScriptableObject только там, где это действительно нужно.
- Классы для внутреннего использования в компоненте объявлять вложенными (можно как partial).
- Свойства только для нужных полей. Сериализовать поля только когда необходимо (доступ из редакторе, сохранение в JSON).

====================
ОБЯЗАТЕЛЬНО СДЕЛАТЬ/ИСПРАВИТЬ/РЕШИТЬ:

	НАИМЕНОВАНИЕ:
- Уменьшить вложенность скриптов в пространства имен (Game, Game.Model, Game.UI). Сортировку по папкам дополняющую пространства имен можно оставить.

	МОДЕЛЬ:
- Флаг о разовом показе сообщения о скором разрушении предмета нужно вынести в слот рук, так как это к нему относится, а не к предмету.
- ? Отделить модель инвентаря от действий около ?

	ИНВЕНТАРЬ:
- Вынести общий код из слота и слота рук в отдельный класс.
- Сообщение о невозможности подобрать, когда инвентарь заполнен и не показывать его, если что-то все же подобрали.

	UI:
- Сделать растягивание текста в сообщениях Notifier на всю ширину при отключенной картинке.
- Вынести в отдельную сцену, после рефакторинга, которую подгружать для каждого уровня.

	СИСТЕМА ПЕРЕДВИЖЕНИЯ:
- Исправить - когда зажата кнопка прыжка, то происходит удвоенное приземление игрока (видно в логах).
- Исправить - очень высокий прыжок, когда сбоку вплотную находится тайл (попробовать уменьшить GroundCheck).

	КОНТРОЛЛЕР:
- Добавить клавиши W A S D для перемещения игрока.

	РЕДАКТОР:
- Удалить все ненужные теги после рефакторинга.
- Отсортировать слои после рефакторинга.

	СЦЕНА:
- Player.position.Z сделал равным 1, чтобы предметы подсвечивались, когда игрок стоит за ними. Когда отсортирую слои, тогда, возможно, вернуть в 0.

====================
ХОРОШО БЫ СДЕЛАТЬ:

	ГРАФИКА:
- Нарисовать и добавить спрайты сломанных предметов - для уведомлений о разрушении предмета подойдут идеально.
- Объединить всю графику в один тайлсет.

	АНИМАЦИИ/СОСТОЯНИЕ:
- Сделать анимацию прыжка конечной, переходящей в падение через время.

	РЕДАКТОР:
- Написать код для Editior, чтобы выбранные спрайты для тайлов/предметов были видны как изображения, а не как поля.
- Удобное создание уровней (расстановка тайлов) в редакторе.

	МОДЕЛЬ:
- Можно сделать повреждения предметов/тайлов случайные в небольшом диапазоне, а не фиксированные.
- Текстовые описания сделать более юморными.

	UNITY:
- Сделать UpdateManager

====================
ECS:

	МОДЕЛЬ:
- После рефакторинга проекта сделать ветку, в которой переписать все под ECS. И развивать обе ветки параллельно.

